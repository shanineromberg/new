
name: Terrafom tests
on:
  pull_request:
    branches: [ develop ]
defaults:
  run:
    working-directory: terraform
    
jobs:
  terraform-1:
    name: 'Terraform'
    runs-on: [self-hosted]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Nodejs
      uses: actions/setup-node@v1  
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1  
    - name: Terraform Format
      continue-on-error: true
      id: fmt
      run: terraform fmt -check
      working-directory: terraform
    - name: Terraform Init
      id: init
      continue-on-error: true
      run: terraform init -backend-config=../.github/CI/backend.tfvars
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: true
      working-directory: terraform   
  terraform-upgrade:
    name: 'Terraform upgrade'
    runs-on: [self-hosted]
    needs: [terraform-1]
    steps:
    - name: Terraform plan
      id: plan
      run: terraform plan -no-color -input=false -out=tfplan -var -file 
      working-directory: terraform 
      continue-on-error: true 
    - name: Update Pull Request
      uses: actions/github-script@6
      if: github.event_name == 'pull_request'
      env:
       PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
        issue_number: context.issue.number,
        owner: context.repo.owner,
        repo: context.repo.repo,
        body: output
          })
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      working-directory: terraform 
    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve -input=false tfplan
      working-directory: terraform  
  terraform-new-env:
    name: 'Terraform new env'
    runs-on: [self-hosted]
    needs: [terraform-1]
    steps:
    - name: to run VPC image using docker run command with new env file 
      run: echo "we want to test K8s we need VPC before the K8s plan  we will create VPC using the image on docker hub , we need to login to docker before"
    - name: Terraform plan
      id: plan
      run: terraform plan -no-color -input=false -out=tfplan -var -file 
      working-directory: terraform  
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      working-directory: terraform 
    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve -input=false tfplan
      working-directory: terraform  

